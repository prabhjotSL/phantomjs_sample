{
  "name": "zombie-phantom",
  "version": "0.0.6",
  "description": "Provides a Zombie.js shim around the PhantomJS Headless Browser.",
  "author": {
    "name": "Travis Tidwell",
    "email": "travist349@gmail.com",
    "url": "http://github.com/travist"
  },
  "homepage": "http://github.com/travist/zombie-phantom",
  "repository": {
    "type": "git",
    "url": "git://github.com/travist/zombie-phantom.git"
  },
  "bugs": {
    "url": "http://github.com/travist/zombie-phantom/issues"
  },
  "main": "./lib/zombie.js",
  "engines": {
    "node": "= 0.10"
  },
  "dependencies": {
    "node-phantom": ">=0",
    "underscore": ">=0",
    "async": ">=0"
  },
  "readme": "Zombie Phantom\n-----------------------\n\nThis is a Node.js package that provides a Zombie.js shim around the PhantomJS headless\nbrowser.  The motivation behind this package is that when looking for a headless\nbrowser solution, I really liked the API of Zombie.js as well as the full Node.js\nsupport behind it, however it is not a full WebKit browser.  PhantomJS on the other\nhand is a better technology in terms of headless browser, but does not have a\nnative Node.js integration.  The <a href=\"https://github.com/alexscheelmeyer/node-phantom\">Node Phantom</a>\npackage integrates the PhantomJS into the Node.js framework, but what it doesn't\ndo, and likely so, is provide a better API like the Zombie.js framework.\n\nThis package simply attempts to act as a drop-in replacement for Zombie.js but\nusing the PhantomJS headless browser.\n\n<strong>NOTE: THIS PACKAGE IS STILL INCOMPLETE AND IS NOT A FULL DROP-IN REPLACEMENT\nFOR ZOMBIE.JS</strong>\n\nInstallation\n========================\n\nStep 1\n============\nInstall node.js by going to http://nodejs.org\n\nStep 2\n============\nInstall PhantomJS by going to http://phantomjs.org/download.html\n\nStep 3\n============\nInstall this package using Node Package Manager (npm)\n\n```\nnpm install zombie-phantom\n```\n\nDifferences between Zombie.js\n=========================\nUsing this library is going to be 'similar' to using Zombie.js.  I couldn't make\nit an exact replica of Zombie.js due to the nature of the asynchronous behavior\nof interacting with any API within PhantomJS.  For example, to get the text of\nan element on the page looks like the following in both Zombie.js and this module.\n\n<strong>Zombie.js</strong>\n```\nvar Browser = require('zombie');\nvar browser = new Browser({\n  site: 'http://localhost:8888'\n});\n\nbrowser.visit('/user/login', function() {\n  var text = browser.text('h1');\n  console.log(text);\n});\n```\n\nWhereas in Zombie-Phantom, everything is asynchronous... like so.\n\n<strong>Zombie-Phantom</strong>\n```\nvar Browser = require('zombie');\nvar browser = new Browser({\n  site: 'http://localhost:8888'\n});\n\nbrowser.visit('/user/login', function() {\n  browser.text('h1', function(text) {\n    console.log(text);\n  });\n});\n```\n\nUsing query, queryAll, and xpath\n=================================\nAnother big difference is that this library does not return actual DOM elements\nwhich you can use to manipulate.  It does however, return an index into a DOM\narray within the PhantomJS browser which you can use to perform the same actions\nas you would with Zombie.js.  It is easier to think of this index as a DOM element\nID which you return back to the library to do stuff... Here is an example.\n\n```\nvar _ = require('underscore');\nvar async = require('async');\nvar Browser = require('zombie');\nvar browser = new Browser({\n  site: 'http://localhost:8888'\n});\n\nbrowser.visit('/user/login', function() {\n  browser.query('h1.title', function(title) {\n\n    // title is actually an ID to a DOM element here, not an actual element.\n    // But, I can still pass it along to the browser API like I would and it\n    // will still work by referencing the DOM element within PhantomJS.\n    browser.xpath('..//label', title, function(labels) {\n\n      // labels is actually just an array of ID's here, but I can still use them\n      _.each(labels, function(label) {\n        drupal.browser.text(label, function(text) {\n          console.log(text);\n        });\n      });\n    });\n  });\n});\n```\n\nPromises using Async.js\n==========================\nAs you can tell, the promise system from Zombie.js has not been implemented,\nhowever, you can replicate this functionality using the <a href=\"https://github.com/caolan/async\">Async.js</a>\nlibrary.  Here is an example of using the promises from async to turn what\nwas once callback hell into an easy to follow series of executions.\n\n<strong>example.js</strong>\n```\nvar Browser = require('zombie-phantom');\nvar async = require('async');\n\nvar browser = new Browser({\n  site: 'http://localhost:8888'\n});\n\n// Current this library does not support promises, but you can use async.series\n// to get something similar...\n\nasync.series([\n  function(done) { browser.visit('/user/login', done); },\n  function(done) { browser.fill('#user-name', 'admin', done); },\n  function(done) { browser.fill('#user-pass', '123password', done); },\n  function(done) { browser.pressButton('#edit-submit', done); },\n  function(done) { browser.visit('/node/add/article', done); },\n  function(done) { browser.fill('#edit-title', 'This is a test!', done); },\n  function(done) { browser.pressButton('#edit-submit', done) }\n], function() {\n  console.log('Content Created!');\n  browser.close();\n});\n\n```\nPlease contribute to make this project better.\n",
  "readmeFilename": "README.md",
  "_id": "zombie-phantom@0.0.6",
  "dist": {
    "shasum": "4be890d11cc514c609d86c359264afac9faa9d06",
    "tarball": "http://registry.npmjs.org/zombie-phantom/-/zombie-phantom-0.0.6.tgz"
  },
  "_from": "zombie-phantom@*",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "travist",
    "email": "travist349@gmail.com"
  },
  "maintainers": [
    {
      "name": "travist",
      "email": "travist349@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "4be890d11cc514c609d86c359264afac9faa9d06",
  "_resolved": "https://registry.npmjs.org/zombie-phantom/-/zombie-phantom-0.0.6.tgz"
}
